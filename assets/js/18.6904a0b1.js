(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{512:function(e,s,n){"use strict";n.r(s);var t=n(6),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"webpack-踩坑记录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack-踩坑记录"}},[e._v("#")]),e._v(" webpack 踩坑记录")]),e._v(" "),n("p",[e._v("1.确认package的入口文件有没有错误")]),e._v(" "),n("blockquote",[n("p",[e._v("webpack 使用 common.js")])]),e._v(" "),n("p",[e._v("2.require 后面的js不需要加.j后缀")]),e._v(" "),n("blockquote",[n("p",[e._v("yarn add webpack --save  保存程序运行的包")]),e._v(" "),n("p",[n("em",[e._v("-save 是 yarn 默认的")])]),e._v(" "),n("p",[n("em",[e._v("yarn add "),n("packageName",[e._v(" --dev"),n("code",[e._v("依赖会记录在")]),e._v("package.json"),n("code",[e._v("的")]),e._v("devDependencies` 下")])],1)]),e._v(" "),n("p",[e._v("webpack --mode development 开发模式")]),e._v(" "),n("p",[e._v("--mode production")]),e._v(" "),n("p",[e._v("区别： 对开发友好，代码能读懂 ，生产更加简洁")]),e._v(" "),n("p",[e._v("webpack 里的chunk 就是他打包后的代码块的意思，chunkname就是打包后代码的名字。,会根据文件的依赖关系生成chunk文件,")]),e._v(" "),n("p",[e._v("module  就是 各种资源 如css img js 等文件,可以指定Loader去处理这些文件")]),e._v(" "),n("p",[e._v("bundle 就是webpack处理完chunk文件之后输出的bundle文件,这个文件包含了经过加载和编译的最终产物")]),e._v(" "),n("p",[e._v("其实就是同一份代码在不同场景的名字..")]),e._v(" "),n("p",[e._v("处理前是module,处理中是chunk,处理后的bundle")])]),e._v(" "),n("blockquote"),e._v(" "),n("p",[e._v("webpack ./src/index.js （指定入口文件）-o ./build/build.js  指定出口文件，--mode development")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new htmlWebpackPlugin({\n chunks:['index',vendor],//打包的html文件指定引入chunk\n})\n")])])]),n("h3",{attrs:{id:"打包html"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#打包html"}},[e._v("#")]),e._v(" 打包html")]),e._v(" "),n("blockquote",[n("p",[e._v("下载插件 yarn add html-webpack-plugin")]),e._v(" "),n("blockquote",[n("p",[e._v("在 w.c.j中require('h.w.p'),")]),e._v(" "),n("p",[e._v("在plugins:[new HWP的构造方法]( "),n("strong",[e._v("{")]),e._v("//自动引入打包输出的所有资源(js/css)")]),e._v(" "),n("blockquote",[n("p",[e._v("构造方法 :template:'./src/index.html' 复制该文件引入资源")]),e._v(" "),n("p",[e._v('finlename" 打包文件的bundle文件名')]),e._v(" "),n("p",[e._v("​      "),n("strong",[e._v("minify: {")])]),e._v(" "),n("p",[e._v("​        "),n("strong",[e._v("// 移除空格")])]),e._v(" "),n("p",[e._v("​        "),n("strong",[e._v("collapseWhitespace:true,")])]),e._v(" "),n("p",[e._v("​        "),n("strong",[e._v("// 移除注释")])]),e._v(" "),n("p",[e._v("​        "),n("strong",[e._v("removeComments:true")])]),e._v(" "),n("p",[e._v("​      "),n("strong",[e._v("}")])]),e._v(" "),n("p",[n("strong",[e._v("}")]),e._v(")")])])]),e._v(" "),n("p",[e._v("module: {")]),e._v(" "),n("p",[e._v("rules:[  test: /.html$/,")]),e._v(" "),n("p",[e._v("​    loader: 'html-loader'  ]")]),e._v(" "),n("p",[e._v("}")])]),e._v(" "),n("h3",{attrs:{id:"打包css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#打包css"}},[e._v("#")]),e._v(" 打包CSS")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("yarn add css-loader style-loader")])]),e._v(" "),n("p",[e._v("w"),n("strong",[e._v("ebpack先用css-loader加载器去解析这个文件")]),e._v("，遇到“@import”等语句就将相应样式文件引入（所以如果没有css-loader，就没法解析这类语句），"),n("strong",[e._v("最后计算完的css，将会使用style-loader生成一个内容为最终解析完的css代码的style标签，放到head标签里。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('plugins: [\n    new MiniCssExtractPlugin({\n        filename: "css/common.css"\n    }),\n]        \n')])])]),n("blockquote",[n("p",[n("strong",[e._v("MiniCssExtractPlugin该插件的主要是为了抽离css样式,"),n("strong",[e._v("所有样式包括css、less都")]),e._v("打包到一个css文件 common.css")]),e._v("防止将样式打包在js中引起页面样式加载错乱的现象;")]),e._v(" "),n("blockquote",[n("p",[e._v("rules:[test:/.css$/,use[MiniCssExtractPlugin.loader,' css-loader ']]")]),e._v(" "),n("p",[e._v("​\tplugins: [")]),e._v(" "),n("p",[e._v("​\tnew MiniCssExtractPlugin()")]),e._v(" "),n("p",[e._v("​\t]")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module : {\n\trules:[\n\t{test:/\\.css$/,use:['style.css','css-loader']}//从右到左的执行顺序,一个不需要写use,直接写loader:css-style\n\t]\n}\n")])])]),n("h3",{attrs:{id:"打包less和sass"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#打包less和sass"}},[e._v("#")]),e._v(" 打包Less和Sass")]),e._v(" "),n("blockquote",[n("p",[e._v("Sass和Less都属于CSS预处理器，定义了一种新的语言，其基本思想是用一种专门的编程语言，为CSS增加一些编程的特性，将CSS作为目标生成文件，然后开发者使用这种语言进行CSS编码工作.")]),e._v(" "),n("p",[e._v("Less需要使用npm下载less包和less-loader")]),e._v(" "),n("p",[e._v("Sass需要使用npm下载node-sass包和sass-loader")]),e._v(" "),n("blockquote",[n("p",[e._v("module : {\nrules:[\n{test:/.css$,use:['style.css','css-loader' ,less-loader]} 从右到左")]),e._v(" "),n("p",[e._v("}")])])]),e._v(" "),n("h3",{attrs:{id:"处理css兼容性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理css兼容性"}},[e._v("#")]),e._v(" 处理CSS兼容性")]),e._v(" "),n("blockquote",[n("p",[e._v("需要使postcss处理， 下载两个包post-loader和postcss-preset-env")]),e._v(" "),n("p",[e._v("–npm i postcss-loader postcss-preset-env -D")]),e._v(" "),n("p",[n("strong",[e._v("postcss会找到package.json中的browserslist里面的配置，通过配置加载css的兼容性")])]),e._v(" "),n("p",[n("strong",[e._v("修改loader的配置， 新版需要写postcss.config.js, less和sass兼容性同理")])]),e._v(" "),n("blockquote",[n("p",[e._v("先创建 postcss.config.js  / module.exports / require('postcss-preset-env')")]),e._v(" "),n("p",[e._v("module : {")]),e._v(" "),n("p",[e._v("​\t\trules: [ {test:/.css$,use:['style.css','css-loader' ,less-loader,' postcss-loader ']} 从右到左 ]")]),e._v(" "),n("p",[e._v("​\t}")]),e._v(" "),n("blockquote",[n("p",[e._v("package.json")]),e._v(" "),n("p",[e._v("browserlist: [")]),e._v(" "),n("p",[e._v('">0.20%" 兼容百分之80的浏览器')]),e._v(" "),n("p",[e._v('"last 2 versions" 最新的两个版本内的浏览器')]),e._v(" "),n("p",[e._v('"not dead" 非死')]),e._v(" "),n("p",[e._v("]")])])])]),e._v(" "),n("h3",{attrs:{id:"压缩css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#压缩css"}},[e._v("#")]),e._v(" 压缩CSS")]),e._v(" "),n("blockquote",[n("p",[e._v("–1. 引入插件")]),e._v(" "),n("p",[e._v("•const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin');")]),e._v(" "),n("p",[e._v("–2. 使用插件")]),e._v(" "),n("p",[e._v("•  plugins: [ new OptimizeCssAssetsWebpackPlugin() ],")])]),e._v(" "),n("h3",{attrs:{id:"webpack打包图片资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack打包图片资源"}},[e._v("#")]),e._v(" webpack打包图片资源")]),e._v(" "),n("blockquote",[n("p",[e._v("下载url-loader和file-loader两个包， 依赖关系")]),e._v(" "),n("blockquote",[n("div",{staticClass:"language-css extra-class"},[n("pre",{pre:!0,attrs:{class:"language-css"}},[n("code",[n("span",{pre:!0,attrs:{class:"token selector"}},[e._v("rules:[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token selector"}},[e._v("test:/ \\ . (png |  jpg  | jpeg | gif) $/,use:['url-loader',")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token selector"}},[e._v("loader:'file-loader',options:")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("]//多loader\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("]p\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n单loader\n*/")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n     "),n("span",{pre:!0,attrs:{class:"token selector"}},[e._v("test:/ \\ . (png |  jpg  | jpeg | gif) $/,\n     loader:'url-loader',\n         opions:")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n             "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v("public")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./image'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("//css的url会自动加上前缀\n              outputPath：images/，//打包后的图片位置\n              limit：1024*8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" //分隔文件大小\n               name："),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'[name][hash:10].[ext]'")]),e._v("//名字加上哈希值加上扩展名\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[e._v("yarn add html-loader \nhtml的图片写当前目录下的文件相对路径\n打包html中的图片文件")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    test：/\\.html$/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v("loader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'html-loader'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),n("h3",{attrs:{id:"打包字体图标资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#打包字体图标资源"}},[e._v("#")]),e._v(" 打包字体图标资源")]),e._v(" "),n("blockquote",[n("p",[e._v("排除法  exclude:/.(| 各种常规文件|js|json| html| css) $/,")]),e._v(" "),n("p",[e._v("loader:file-loader")]),e._v(" "),n("p",[e._v("output")]),e._v(" "),n("p",[e._v("publicPath")]),e._v(" "),n("p",[e._v("name")]),e._v(" "),n("p",[e._v("index.js 需要加入require(iconfont.css)")])]),e._v(" "),n("h4",{attrs:{id:"配置eslint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置eslint"}},[e._v("#")]),e._v(" 配置Eslint")]),e._v(" "),n("blockquote",[n("p",[e._v("下载插件, loader:eslint-loader配置插件package.json 加入eslintConfig:{")]),e._v(" "),n("p",[e._v("extends:airbnb-base")]),e._v(" "),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("下行eslint所有规则无效")]),e._v(" "),n("p",[e._v("eslint-disable-next-line")])]),e._v(" "),n("h3",{attrs:{id:"hmr模块热替换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hmr模块热替换"}},[e._v("#")]),e._v(" HMR模块热替换")]),e._v(" "),n("blockquote",[n("p",[e._v("模块热替换(Hot Module Replacement 即 HMR)是 webpack 提供的最有用的功能之一, 它允许在运行时更新各种模块, 而无需进行完全刷新。")]),e._v(" "),n("p",[e._v("启用这个功能，只需要修改一下 webpack.config.js 的配置, 使用 webpack 内置的 HMR 插件就可以了， 在devServer中使用hot参数。")]),e._v(" "),n("p",[e._v("启用 webpack 内置的 HMR插件后, module.hot 接口就会暴露在 index.js 中, 接下来需要在 index.js 中配置告诉 webpack 接受HMR的模块。")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("样式HMR功能，在开发环境中使用style-loader")])]),e._v(" "),n("li",[n("p",[e._v("HTM的HMR功能，默认也没有HMR功能（不用做HMR功能），需要在entry入口中引入html文件。")])]),e._v(" "),n("li",[n("p",[e._v("js的HMR功能，默认没有HMR功能，只能处理非入口文件的js文件。")])])]),e._v(" "),n("p",[e._v("启用 webpack 内置的 HMR插件后, module.hot 接口就会暴露在 index.js 中, 接下来需要在 index.js 中配置告诉 webpack 接受HMR的模块")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (module.hot) {\n    module.hot.accept('./print.js', function() { //告诉 webpack 接受热替换的模块\n        console.log('Accepting the updated printMe module!');\n        printMe();\n    })\n}\n\n服务器检测到了 print.js 的代码变化并且执行了 module.hot.accept 的回调函数\n\n")])])]),n("h3",{attrs:{id:"配置devserver"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置devserver"}},[e._v("#")]),e._v(" 配置DevServer")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("yarn add webpack-dev-server\n启动webpack serve\n配置 端口 webpack serve --port 3003\n")])])]),n("p",[e._v("w.c.j  target:'web'")]),e._v(" "),n("h3",{attrs:{id:"去除项目的dead-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#去除项目的dead-code"}},[e._v("#")]),e._v(" 去除项目的Dead Code")]),e._v(" "),n("blockquote",[n("p",[e._v("yarn add purgecss-webpack-plugin -D")]),e._v(" "),n("blockquote")]),e._v(" "),n("h4",{attrs:{id:"webpack-config-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack-config-js"}},[e._v("#")]),e._v(" webpack.Config.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\nconst { resolve } = require(\'path\');//基于node\n//引用插件html-webpack-plugin\n\nmodule.exports = {\n  mode: \'development\',\n  //   mode: "production", // "production" | "development" | "none"  // 告诉webpack是生产环境还是开发环境.\n  entry: \'./src/index.js\',\n  //   entry: "./app/entry", // string | object | array  // 默认 ./src\n  //   // 入口起点，可以指定多个入口起点\n\n  // Array：多入口形成一个chunk 输出也是一个 bundle，名称是output的filename\n  //entry：[\'src/index\',\'main.js\']\n\n\n  //  object：多入口，有几个入口文件就会生成几个chunk ，并输出几个bundle，\n  //entry： {\n  //  one:\'./src/index.js\'\n  //  two:\'./src/main.js\'\n  // 输出的两个文件名就是对象的key值 \n  // 特殊用法\n  // entry: {\n  //   onea:[hello.js,index.js]\n  //   twob: [a.js,b.js]\n  // 输出两个文件,数组里面的chunk合成文件名 onea.js/towb.js  \n  //}\n  output: {\n    filename: \'main.js\',\n    path: resolve(__dirname, \'build\')\n  },\n  //   output: {\n  //     // 输出，只可指定一个输出配置\n  //     path: path.resolve(__dirname, "dist"), // string\n  //     //  所有输出文件所在的目录 \n  //     // 必须是绝对路径(use the Node.js path module)\n  module: {\n    rules: [\n\n    ]\n  },\n  plugins:[\n    //默认会创建一个空的html,目的是自动引入打包的资源\n    new HtmlWebpackPlugin( {\n      template:\'./src/index.html\',\n      filename:\'demo.html\',\n      //指定chunk的\n      minify:{\n      //删除空格\n        collapseWhitespace:true,\n        //移除注释\n        removeComments:false,\n      }\n\n    }),\n  ]//\n  //     filename: "bundle.js", // string    // 输出文件的名称\n  //     publicPath: "/assets/", // string    // 相对于HTML页面解析的输出目录的url\n  //     library: "MyLibrary", // string,\n  //     //导出库的名称\n  //     libraryTarget: "umd", // universal module definition    // the type of the exported library\n  //   module: { //如何处理项目中不同类型的模块  scss img等\n  //     rules: [ //用于规定在不同模块被创建时如何处理模块的规则数组\n  //       {\n  //         test: /\\.jsx?$/, //匹配特定文件的正则表达式或正则表达式数组\n  //         include: [ //规则适用的范围\n  //           path.resolve(__dirname, "app")\n  //         ],\n  //         exclude: [ //规则排除的范围\n  //           path.resolve(__dirname, "app/demo-files")\n  //         ],\n  //         issuer: { test, include, exclude },\n  //         enforce: "pre",\n  //         enforce: "post",\n  //         loader: "babel-loader", //加载器\n  //         options: { //转义\n  //           presets: ["es2015"]\n  //         },\n  //       },\n  //       {\n  //         test: /\\.html$/,\n  //         use: [\n  //           "htmllint-loader",\n  //           {\n  //             loader: "html-loader",\n  //             options: {\n  //               /* ... */\n  //             }\n  //           }\n  //         ]\n  //       },\n  //     ],\n  //   },\n  //   resolve: {\n  //     // 解决模块请求的选项\n  //     modules: [\n  //       "node_modules",\n  //       path.resolve(__dirname, "app")\n  //     ],\n  //     extensions: [".js", ".json", ".jsx", ".css"], // 用到的扩展\n  //     alias: { //模块名称别名列表\n  //       "module": path.resolve(__dirname, "app/third/module.js"),\n  //     },\n  //   },\n  //   performance: {\n  //     hints: "warning", // enum    maxAssetSize: 200000, // int (in bytes),\n  //     maxEntrypointSize: 400000, // int (in bytes)\n  //     assetFilter: function(assetFilename) {\n  //       return assetFilename.endsWith(\'.css\') || assetFilename.endsWith(\'.js\');\n  //     }\n  //   },\n  //   devtool: "source-map", // 代码映射，增强调试，以构建速度为代价\n  //   context: __dirname, // string (绝对路径) //webpack的主目录\n  //   target: "web",\n  //   externals: ["react", /^@angular\\//],  //不要跟踪/捆绑这些模块，而是在运行时从环境中请求它们\n  //   serve: { \n  //     port: 1337,\n  //     content: \'./dist\',\n  //     // ...\n  //   },\n  //   stats: "errors-only",  // 让你精确地控制被显示的包信息\n  //   devServer: {\n  //     proxy: { // 代理url\n  //       \'/api\': \'http://localhost:3000\'\n  //     },\n  //     contentBase: path.join(__dirname, \'public\'), // boolean | string | array, static file //location\n  //     compress: true, //支持gzip压缩\n  //     historyApiFallback: true, // html在404，对象为多个路径\n  //     hot: true, // 热模块替换。取决于HotModuleReplacementPlugin\n  //     https: false, \n  //     noInfo: true, \n  //     // ...\n  //   },\n  //   plugins: [ //webpack插件列表\n  //     // ...\n  //   ],\n//\n  // new webpack.DefinePlugin({\n  //     \'process.env\': {\n  //       NODE_ENV: \'"production"\'\n  //     }\n  //   }),\n}\n')])])])])}),[],!1,null,null,null);s.default=a.exports}}]);